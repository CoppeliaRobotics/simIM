<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<?xml-stylesheet type="text/xsl" href="callbacks.xsl"?>

<plugin name="IM" author="federico.ferri.it@gmail.com">
    <description>Plugin for processing images</description>
    <enum name="format" item-prefix="fmt" base="3600">
        <item name="_8UC1">
            <description>1 channel, 8 bit unsigned int</description>
        </item>
        <item name="_8UC3">
            <description>3 channels, 8 bit unsigned int</description>
        </item>
        <item name="_8UC4">
            <description>4 channels, 8 bit unsigned int</description>
        </item>
        <item name="_32FC1">
            <description>1 channel, 32 bit float</description>
        </item>
        <item name="_32FC3">
            <description>3 channels, 32 bit float</description>
        </item>
        <item name="_32FC4">
            <description>4 channels, 32 bit float</description>
        </item>
    </enum>
    <command name="create">
        <description>Create an image with given size</description>
        <params>
            <param name="width" type="int">
                <description>width</description>
            </param>
            <param name="height" type="int">
                <description>height</description>
            </param>
            <param name="format" type="int" default="sim_im_fmt_8UC3">
                <description>image format (see <enum-ref name="format" />)</description>
            </param>
            <param name="initialValue" type="int" default="0">
                <description>initial value to fill matrix with</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
        </return>
    </command>
    <command name="createFromData">
        <description>Create an image from given raw data</description>
        <params>
            <param name="width" type="int">
                <description>width</description>
            </param>
            <param name="height" type="int">
                <description>height</description>
            </param>
            <param name="data" type="string">
                <description>image data</description>
            </param>
            <param name="format" type="int" default="sim_im_fmt_8UC3">
                <description>image format (see <enum-ref name="format" />)</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
        </return>
    </command>
    <command name="destroy">
        <description>Destroy (i.e.: free memory) an image with given handle</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="read">
        <description>Read an image from the specified file.</description>
        <params>
            <param name="filename" type="string">
                <description>file name</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
        </return>
    </command>
    <command name="write">
        <description>Write the image with given handle to a file.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="filename" type="string">
                <description>file name</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="encode">
        <description>Encode the image to a memory buffer.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="format" type="string">
                <description>image format (e.g. "PNG", "JPG", "BMP")</description>
            </param>
        </params>
        <return>
            <param name="output" type="string">
                <description>output buffer</description>
            </param>
        </return>
    </command>
    <command name="convert">
        <description>Convert the image to a different format.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="format" type="int">
                <description>target image format (see <enum-ref name="format" />)</description>
            </param>
            <param name="scale" type="float" default="1.0">
                <description>scale factor</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to the converted image</description>
            </param>
        </return>
    </command>
    <command name="getFormat">
        <description>Get the format of the image.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
        </params>
        <return>
            <param name="format" type="int">
                <description>image format (see <enum-ref name="format" />)</description>
            </param>
        </return>
    </command>
    <command name="rgb2gray">
        <description>Convert the specified RGB image to gray.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to the converted image</description>
            </param>
        </return>
    </command>
    <command name="gray2rgb">
        <description>Convert the specified grayscale image to RGB.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to the converted image</description>
            </param>
        </return>
    </command>
    <command name="rgb2hsv">
        <description>Convert the specified RGB image to HSV.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to the converted image</description>
            </param>
        </return>
    </command>
    <command name="hsv2rgb">
        <description>Convert the specified HSV image to RGB.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to the converted image</description>
            </param>
        </return>
    </command>
    <command name="rgb2hls">
        <description>Convert the specified RGB image to HLS.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to the converted image</description>
            </param>
        </return>
    </command>
    <command name="hls2rgb">
        <description>Convert the specified HLS image to RGB.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to the converted image</description>
            </param>
        </return>
    </command>
    <command name="split">
        <description>Split a multichannel image.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
        </params>
        <return>
            <param name="handles" type="table" item-type="string">
                <description>handles to individual channel images</description>
            </param>
        </return>
    </command>
    <command name="merge">
        <description>Merge many single channel images into a multichannel image.</description>
        <params>
            <param name="handles" type="table" item-type="string">
                <description>handles to individual channel images</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to merged image</description>
            </param>
        </return>
    </command>
    <command name="mixChannels">
        <description>Mix many single channel images into many multichannel images.</description>
        <params>
            <param name="inputHandles" type="table" item-type="string">
                <description>handles to input images</description>
            </param>
            <param name="outputHandles" type="table" item-type="string">
                <description>handles to output images</description>
            </param>
            <param name="fromTo" type="table" item-type="int">
                <description>array of index pairs, i.e. {src1,dst1,src2,dst2,...,srcN,dstN}. see <a href="http://docs.opencv.org/2.4/modules/core/doc/operations_on_arrays.html#void%20mixChannels(const%20Mat*%20src,%20size_t%20nsrcs,%20Mat*%20dst,%20size_t%20ndsts,%20const%20int*%20fromTo,%20size_t%20npairs)">here</a> for details</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="get">
        <description>Get pixel at specified coordinate.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="coord" type="table" item-type="int" size="2">
                <description>x, y coordinates</description>
            </param>
        </params>
        <return>
            <param name="value" type="table" item-type="float">
                <description>value</description>
            </param>
        </return>
    </command>
    <command name="set">
        <description>Set pixel at specified coordinate.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="coord" type="table" item-type="int" size="2">
                <description>x, y coordinates</description>
            </param>
            <param name="value" type="table" item-type="float">
                <description>value</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <enum name="interp" item-prefix="interp_" base="1200">
        <item name="nearest">
            <description>nearest-neighbor interpolation</description>
        </item>
        <item name="linear">
            <description>bilinear interpolation</description>
        </item>
        <item name="area">
            <description>resampling using pixel area relation (best for shrinking)</description>
        </item>
        <item name="cubic">
            <description>bicubic interpolation over 4x4 pixel neighborhood</description>
        </item>
        <item name="lanczos4">
            <description>Lanczos interpolation over 8x8 pixel neighborhood</description>
        </item>
    </enum>
    <command name="resize">
        <description>Resize an image and return the resized image (original image is not modified).</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="width" type="int">
                <description>width of the new image</description>
            </param>
            <param name="height" type="int">
                <description>height of the new image</description>
            </param>
            <param name="interpolation" type="int" default="sim_im_interp_linear">
                <description>type of interpolation (see <enum-ref name="interp" />)</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to resized image</description>
            </param>
        </return>
    </command>
    <command name="size">
        <description>Get the size of an image.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
        </params>
        <return>
            <param name="size" type="table" item-type="int" size="2">
                <description>size (width, height) of the image</description>
            </param>
        </return>
    </command>
    <command name="copy">
        <description>Copy a (portion of) image to another image.</description>
        <params>
            <param name="srcHandle" type="string">
                <description>handle to source image</description>
            </param>
            <param name="srcOffset" type="table" item-type="int" size="2">
                <description>x, y offset in the source image</description>
            </param>
            <param name="dstHandle" type="string">
                <description>handle to destination image</description>
            </param>
            <param name="dstOffset" type="table" item-type="int" size="2">
                <description>x, y offset in the destination image</description>
            </param>
            <param name="size" type="table" item-type="int" size="2">
                <description>size (width, height) of the copied region</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="clipLine">
        <description>Clips the line against the image rectangle.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="p1" type="table" item-type="int" size="2">
                <description>x, y coordinates of first point</description>
            </param>
            <param name="p2" type="table" item-type="int" size="2">
                <description>x, y coordinates of second point</description>
            </param>
        </params>
        <return>
            <param name="valid" type="bool">
                <description>false if the line segment is completely outside the image rectangle, otherwise true.</description>
            </param>
            <param name="p1" type="table" item-type="int" size="2">
                <description>x, y coordinates of first point</description>
            </param>
            <param name="p2" type="table" item-type="int" size="2">
                <description>x, y coordinates of second point</description>
            </param>
        </return>
    </command>
    <command name="line">
        <description>Draw a line segment between (x1,y1) and (x2,y2) points in the image.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="p1" type="table" item-type="int" size="2">
                <description>x, y coordinates of first point</description>
            </param>
            <param name="p2" type="table" item-type="int" size="2">
                <description>x, y coordinates of second point</description>
            </param>
            <param name="color" type="table" item-type="int" size="3">
                <description>color (red, green, blue values in range 0..255)</description>
            </param>
            <param name="thickness" type="int" default="1">
                <description>line thickness</description>
            </param>
            <param name="type" type="int" default="8">
                <description>type of the line (8 for 8-connected line, 4 for 4-connected line, or 16 for antialiased line)</description>
            </param>
            <param name="shift" type="int" default="0">
                <description>number of fractional bits in the point coordinates</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="arrowedLine">
        <description>Draw a arrow segment starting from (x1,y1) and pointing to (x2,y2).</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="p1" type="table" item-type="int" size="2">
                <description>x, y coordinates of first point</description>
            </param>
            <param name="p2" type="table" item-type="int" size="2">
                <description>x, y coordinates of second point</description>
            </param>
            <param name="color" type="table" item-type="int" size="3">
                <description>color (red, green, blue values in range 0..255)</description>
            </param>
            <param name="thickness" type="int" default="1">
                <description>line thickness</description>
            </param>
            <param name="type" type="int" default="8">
                <description>type of the line (8 for 8-connected line, 4 for 4-connected line, or 16 for antialiased line)</description>
            </param>
            <param name="shift" type="int" default="0">
                <description>number of fractional bits in the point coordinates</description>
            </param>
            <param name="tipLength" type="float" default="0.1">
                <description>The length of the arrow tip in relation to the arrow length</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="polylines">
        <description>Draw several polygonal curves.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="points" type="table" item-type="int">
                <description>curve points, i.e. {c1x1, c1y1, c1x2, c1y2, ..., c1xN1, c1yN1, c2x1, c2y1, ..., c2xN2, c2yN2, ..., cMxNM, cMyNM}</description>
            </param>
            <param name="numPoints" type="table" item-type="int">
                <description>lengths of curves, i.e. {N1, N2, ..., NM}. the sum of numPoints items must be equal to the number of x,y pairs in points.</description>
            </param>
            <param name="isClosed" type="bool">
                <description>Flag indicating whether the drawn polylines are closed or not. If they are closed, the function draws a line from the last vertex of each curve to its first vertex.</description>
            </param>
            <param name="color" type="table" item-type="int" size="3">
                <description>color (red, green, blue values in range 0..255)</description>
            </param>
            <param name="thickness" type="int" default="1">
                <description>line thickness</description>
            </param>
            <param name="type" type="int" default="8">
                <description>type of the line (8 for 8-connected line, 4 for 4-connected line, or 16 for antialiased line)</description>
            </param>
            <param name="shift" type="int" default="0">
                <description>number of fractional bits in the point coordinates</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="rectangle">
        <description>Draw a rectangle with corners (x1,y1) and (x2,y2) points in the image.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="p1" type="table" item-type="int" size="2">
                <description>x, y coordinates of top-left corner</description>
            </param>
            <param name="p2" type="table" item-type="int" size="2">
                <description>x, y coordinates of bottom-right corner</description>
            </param>
            <param name="color" type="table" item-type="int" size="3">
                <description>color (red, green, blue values in range 0..255)</description>
            </param>
            <param name="thickness" type="int" default="1">
                <description>line thickness (negative values means rect is filled)</description>
            </param>
            <param name="type" type="int" default="8">
                <description>type of the line (8 for 8-connected line, 4 for 4-connected line, or 16 for antialiased line)</description>
            </param>
            <param name="shift" type="int" default="0">
                <description>number of fractional bits in the point coordinates</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="circle">
        <description>Draw a circle with center (cx,cy) and radius r.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="center" type="table" item-type="int" size="2">
                <description>x, y coordinates of center</description>
            </param>
            <param name="radius" type="int">
                <description>circle radius</description>
            </param>
            <param name="color" type="table" item-type="int" size="3">
                <description>color (red, green, blue values in range 0..255)</description>
            </param>
            <param name="thickness" type="int" default="1">
                <description>line thickness (negative values means rect is filled)</description>
            </param>
            <param name="type" type="int" default="8">
                <description>type of the line (8 for 8-connected line, 4 for 4-connected line, or 16 for antialiased line)</description>
            </param>
            <param name="shift" type="int" default="0">
                <description>number of fractional bits in the point coordinates</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="ellipse">
        <description>Draw an ellipse with center (cx,cy) and axes (rx,ry) points in the image.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="center" type="table" item-type="int" size="2">
                <description>x, y coordinates of center</description>
            </param>
            <param name="radius" type="table" item-type="int" size="2">
                <description>radius along x and y axis</description>
            </param>
            <param name="angle" type="float" default="0.0">
                <description>rotation in degrees</description>
            </param>
            <param name="startAngle" type="float" default="0.0">
                <description>starting angle of the elliptic arc in degrees</description>
            </param>
            <param name="endAngle" type="float" default="360.0">
                <description>ending angle of the elliptic arc in degrees</description>
            </param>
            <param name="color" type="table" item-type="int" size="3" default="{255,255,255}">
                <description>color (red, green, blue values in range 0..255)</description>
            </param>
            <param name="thickness" type="int" default="1">
                <description>line thickness (negative values means rect is filled)</description>
            </param>
            <param name="type" type="int" default="8">
                <description>type of the line (8 for 8-connected line, 4 for 4-connected line, or 16 for antialiased line)</description>
            </param>
            <param name="shift" type="int" default="0">
                <description>number of fractional bits in the point coordinates</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="fillPoly">
        <description>Fills the area bounded by one or more polygon.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="points" type="table" item-type="int">
                <description>contour points, i.e. {c1x1, c1y1, c1x2, c1y2, ..., c1xN1, c1yN1, c2x1, c2y1, ..., c2xN2, c2yN2, ..., cMxNM, cMyNM}</description>
            </param>
            <param name="numPoints" type="table" item-type="int">
                <description>lengths of countours, i.e. {N1, N2, ..., NM}. the sum of numPoints items must be equal to the number of x,y pairs in points.</description>
            </param>
            <param name="offset" type="table" item-type="int" size="2">
                <description>x, y offset for all points</description>
            </param>
            <param name="color" type="table" item-type="int" size="3">
                <description>color (red, green, blue values in range 0..255)</description>
            </param>
            <param name="type" type="int" default="8">
                <description>type of the line (8 for 8-connected line, 4 for 4-connected line, or 16 for antialiased line)</description>
            </param>
            <param name="shift" type="int" default="0">
                <description>number of fractional bits in the point coordinates</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="fillConvexPoly">
        <description>Fills a convex polygon.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="points" type="table" item-type="int">
                <description>polygon vertices, i.e. {x1, y1, x2, y2, ..., xN, yN}</description>
            </param>
            <param name="color" type="table" item-type="int" size="3">
                <description>color (red, green, blue values in range 0..255)</description>
            </param>
            <param name="type" type="int" default="8">
                <description>type of the line (8 for 8-connected line, 4 for 4-connected line, or 16 for antialiased line)</description>
            </param>
            <param name="shift" type="int" default="0">
                <description>number of fractional bits in the point coordinates</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <enum name="fontFace" item-prefix="fontface_" base="9000">
        <item name="simplex"></item>
        <item name="plain"></item>
        <item name="duplex"></item>
        <item name="complex"></item>
        <item name="triplex"></item>
        <item name="complex_small"></item>
        <item name="script_simplex"></item>
        <item name="script_complex"></item>
    </enum>
    <command name="text">
        <description>Drawn a text string.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="str" type="string">
                <description>text string to be drawn</description>
            </param>
            <param name="pos" type="table" item-type="int" size="2">
                <description>x, y coordinates of the origin (bottom-left corner of the string)</description>
            </param>
            <param name="fontFace" type="int" default="sim_im_fontface_simplex">
                <description>font face (see <enum-ref name="fontFace" />)</description>
            </param>
            <param name="italic" type="bool" default="false">
                <description>if true text will have italic style</description>
            </param>
            <param name="fontScale" type="float" default="1.0">
                <description>font scale</description>
            </param>
            <param name="color" type="table" item-type="int" size="3" default="{255,255,255}">
                <description>color (red, green, blue values in range 0..255)</description>
            </param>
            <param name="thickness" type="int" default="1">
                <description>thickness used to draw a text</description>
            </param>
            <param name="type" type="int" default="8">
                <description>type of the line (8 for 8-connected line, 4 for 4-connected line, or 16 for antialiased line)</description>
            </param>
            <param name="bottomLeftOrigin" type="bool" default="false">
                <description>When true, the image data origin is at the bottom-left corner. Otherwise, it is at the top-left corner</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="textSize">
        <description>Calculates the width and height of a text string.</description>
        <params>
            <param name="str" type="string">
                <description>text string to be drawn</description>
            </param>
            <param name="fontFace" type="int" default="sim_im_fontface_simplex">
                <description>font face (see <enum-ref name="fontFace" />)</description>
            </param>
            <param name="italic" type="bool" default="false">
                <description>if true text will have italic style</description>
            </param>
            <param name="fontScale" type="float" default="1.0">
                <description>font scale</description>
            </param>
            <param name="thickness" type="int" default="1">
                <description>thickness used to draw a text</description>
            </param>
        </params>
        <return>
            <param name="width" type="int">
                <description>width of the text</description>
            </param>
            <param name="height" type="int">
                <description>height of the text</description>
            </param>
            <param name="baseline" type="int">
                <description>y-coordinate of the baseline relative to the bottom-most text point</description>
            </param>
        </return>
    </command>
    <command name="abs">
        <description>Calculates an absolute value of each pixel.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="absdiff">
        <description>Calculates the per-element absolute difference between two arrays.</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="absdiffK">
        <description>Calculates the per-element absolute difference between an array and a scalar.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="k" type="table" item-type="float">
                <description>scalar</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="add">
        <description>Calculates the per-element sum of two arrays.</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="addK">
        <description>Calculates the per-element sum of an array and a scalar.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="k" type="table" item-type="float">
                <description>scalar</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="subtract">
        <description>Calculates the per-element difference of two arrays.</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="subtractK">
        <description>Calculates the per-element difference of an array and a scalar.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="k" type="table" item-type="float">
                <description>scalar</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="multiply">
        <description>Calculates the per-element product of two arrays.</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="divide">
        <description>Calculates the per-element division of two arrays.</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="divideK">
        <description>Calculates the per-element division of a scalar by an array.</description>
        <params>
            <param name="k" type="table" item-type="float">
                <description>scalar</description>
            </param>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <enum name="cmpOp" item-prefix="cmpop_" base="5700">
        <item name="eq"></item>
        <item name="gt"></item>
        <item name="ge"></item>
        <item name="lt"></item>
        <item name="le"></item>
        <item name="ne"></item>
    </enum>
    <command name="compare">
        <description>Performs the per-element comparison of two arrays.</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
            <param name="op" type="int">
                <description>comparison operator</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="compareK">
        <description>Performs the per-element comparison of an array and scalar value.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="k" type="table" item-type="float">
                <description>scalar</description>
            </param>
            <param name="op" type="int">
                <description>comparison operator</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <enum name="reduceOp" item-prefix="reduceop_" base="6700">
        <item name="sum">
            <description>the output is the sum of all rows/columns of the matrix.</description>
        </item>
        <item name="avg">
            <description>the output is the mean vector of all rows/columns of the matrix.</description>
        </item>
        <item name="max">
            <description>the output is the maximum (column/row-wise) of all rows/columns of the matrix.</description>
        </item>
        <item name="min">
            <description>the output is the minimum (column/row-wise) of all rows/columns of the matrix.</description>
        </item>
    </enum>
    <command name="reduce">
        <description>Reduces a matrix to a vector.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="dim" type="int">
                <description>dimension index along which the matrix is reduced. 0 means that the matrix is reduced to a single row. 1 means that the matrix is reduced to a single column.</description>
            </param>
            <param name="op" type="int">
                <description>reduction operation (see <enum-ref name="reduceOp" />)</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="repeat">
        <description>Fills the output array with repeated copies of the input array.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="nx" type="int">
                <description>how many times the src is repeated along the horizontal axis</description>
            </param>
            <param name="ny" type="int">
                <description>how many times the src is repeated along the vertical axis</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <enum name="flipOp" item-prefix="flipop_" base="8900">
        <item name="x">
            <description>flip around the x-axis</description>
        </item>
        <item name="y">
            <description>flip around the y-axis</description>
        </item>
        <item name="both">
            <description>flip around both axes</description>
        </item>
    </enum>
    <command name="flip">
        <description>Flips an image around vertical, horizontal, or both axes.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="op" type="int" default="0">
                <description>a flag to specify how to flip the array (see <enum-ref name="flipOp" />)</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="log">
        <description>Calculates the natural logarithm of every array element.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="exp">
        <description>Calculates the exponential of every array element.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="pow">
        <description>Raises every array element to a power.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="power" type="float">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="sqrt">
        <description>Calculates the square root of every array element.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="addWeighted">
        <description>Calculates the weighted sum of two arrays, i.e. DST(i) = SRC1(i)*alpha + SRC2(i)*beta + gamma.</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
            <param name="alpha" type="float">
                <description>alpha coefficient</description>
            </param>
            <param name="beta" type="float">
                <description>beta coefficient</description>
            </param>
            <param name="gamma" type="float">
                <description>gamma coefficient</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="scaleAdd">
        <description>Calculates the sum of a scaled array and another array, i.e. DST(i) = SRC1(i)*scale + SRC2(i).</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
            <param name="alpha" type="float">
                <description>scale coefficient</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="magnitude">
        <description>Calculates the magnitude of 2D vectors, i.e. DST(i) = sqrt(SRC1(i)^2, SRC2(i)^2).</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="phase">
        <description>Calculates the rotation angle of 2D vectors, i.e. DST(i) = atan2(SRC2(i), SRC1(i)).</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
            <param name="angleInDegrees" type="bool" default="false">
                <description>when true, the function calculates the angle in degrees, otherwise, they are measured in radians</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="polar2cart">
        <description>Calculates x and y coordinates of 2D vectors from their magnitude and angle.</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image (magnitude)</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image (angle)</description>
            </param>
            <param name="angleInDegrees" type="bool" default="false">
                <description>when true, the function calculates the angle in degrees, otherwise, they are measured in radians</description>
            </param>
        </params>
        <return>
            <param name="handle1" type="string">
                <description>handle of resulting image (x)</description>
            </param>
            <param name="handle2" type="string">
                <description>handle of resulting image (y)</description>
            </param>
        </return>
    </command>
    <command name="cart2polar">
        <description>Calculates magnitude and angle coordinates of 2D vectors from their x and y coordinates.</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image (x)</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image (y)</description>
            </param>
            <param name="angleInDegrees" type="bool" default="false">
                <description>when true, the function calculates the angle in degrees, otherwise, they are measured in radians</description>
            </param>
        </params>
        <return>
            <param name="handle1" type="string">
                <description>handle of resulting image (magnitude)</description>
            </param>
            <param name="handle2" type="string">
                <description>handle of resulting image (angle)</description>
            </param>
        </return>
    </command>
    <command name="bitwiseAnd">
        <description>Calculates the per-element bit-wise conjunction of two arrays.</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="bitwiseAndK">
        <description>Calculates the per-element bit-wise conjunction of an array and a scalar.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="k" type="table" item-type="float">
                <description>scalar</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="bitwiseOr">
        <description>Calculates the per-element bit-wise disjunction of two arrays.</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="bitwiseOrK">
        <description>Calculates the per-element bit-wise disjunction of an array and a scalar.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="k" type="table" item-type="float">
                <description>scalar</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="bitwiseXor">
        <description>Calculates the per-element bit-wise exclusive-or of two arrays.</description>
        <params>
            <param name="handle1" type="string">
                <description>handle to first image</description>
            </param>
            <param name="handle2" type="string">
                <description>handle to second image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="bitwiseXorK">
        <description>Calculates the per-element bit-wise exclusive-or of an array and a scalar.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="k" type="table" item-type="float">
                <description>scalar</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <command name="bitwiseNot">
        <description>Inverts every bit of an array.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle of resulting image</description>
            </param>
        </return>
    </command>
    <enum name="dist" item-prefix="dist_" base="4200">
        <item name="L1"></item>
        <item name="L2"></item>
        <item name="C"></item>
    </enum>
    <enum name="maskSize" item-prefix="masksize" base="4200">
        <item name="_3x3"></item>
        <item name="_5x5"></item>
        <item name="_precise"></item>
    </enum>
    <command name="distanceTransform">
        <description>Calculates the distance to the closest zero pixel for each pixel of the source image.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="distanceType" type="int" default="sim_im_dist_L2">
                <description>type of distance (see <enum-ref name="dist" />)</description>
            </param>
            <param name="maskSize" type="int" default="sim_im_masksize_precise">
                <description>mask size (see <enum-ref name="masksize" />)</description>
            </param>
            <param name="inPlace" type="bool" default="false">
                <description>if true, the original immage will be converted in place. otherwise, the original image will not be modified and a new image is returned.</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
        </return>
    </command>
    <command name="writeToVisionSensor">
        <description>Write image to vision sensor. Make sure the vision sensor is flagged as <em>external input</em>.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to image</description>
            </param>
            <param name="sensorHandle" type="int">
                <description>handle to vision sensor</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="readFromVisionSensor">
        <description>Read image from vision sensor.</description>
        <params>
            <param name="sensorHandle" type="int">
                <description>handle to vision sensor</description>
            </param>
            <param name="handle" type="string" default='""'>
                <description>handle to existing image, or "" to create and return a new image</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to new image (or existing image if given)</description>
            </param>
        </return>
    </command>
    <command name="openVideoCapture">
        <description>Open video capture device.</description>
        <params>
            <param name="deviceIndex" type="int">
                <description>device index (0 based)</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="closeVideoCapture">
        <description>Close video capture device.</description>
        <params>
            <param name="deviceIndex" type="int">
                <description>device index (0 based)</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="readFromVideoCapture">
        <description>Read frame from video capture device.</description>
        <params>
            <param name="deviceIndex" type="int">
                <description>device index (0 based)</description>
            </param>
            <param name="handle" type="string" default='""'>
                <description>handle to existing image, or "" to create and return a new image</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to new image (or existing image if given)</description>
            </param>
        </return>
    </command>
    <command name="writeToTexture">
        <description>Write image to texture.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to existing image</description>
            </param>
            <param name="textureId" type="int">
                <description>texture id</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <enum name="dict_type" item-prefix="dict" base="9500">
        <item name="_4X4_50">
            <description>4x4 bits, minimum hamming distance between any two codes = 4, 50 codes</description>
        </item>
        <item name="_4X4_100">
            <description>4x4 bits, minimum hamming distance between any two codes = 3, 100 codes</description>
        </item>
        <item name="_4X4_250">
            <description>4x4 bits, minimum hamming distance between any two codes = 3, 250 codes</description>
        </item>
        <item name="_4X4_1000">
            <description>4x4 bits, minimum hamming distance between any two codes = 2, 1000 codes</description>
        </item>
        <item name="_5X5_50">
            <description>5x5 bits, minimum hamming distance between any two codes = 8, 50 codes</description>
        </item>
        <item name="_5X5_100">
            <description>5x5 bits, minimum hamming distance between any two codes = 7, 100 codes</description>
        </item>
        <item name="_5X5_250">
            <description>5x5 bits, minimum hamming distance between any two codes = 6, 250 codes</description>
        </item>
        <item name="_5X5_1000">
            <description>5x5 bits, minimum hamming distance between any two codes = 5, 1000 codes</description>
        </item>
        <item name="_6X6_50">
            <description>6x6 bits, minimum hamming distance between any two codes = 13, 50 codes</description>
        </item>
        <item name="_6X6_100">
            <description>6x6 bits, minimum hamming distance between any two codes = 12, 100 codes</description>
        </item>
        <item name="_6X6_250">
            <description>6x6 bits, minimum hamming distance between any two codes = 11, 250 codes</description>
        </item>
        <item name="_6X6_1000">
            <description>6x6 bits, minimum hamming distance between any two codes = 9, 1000 codes</description>
        </item>
        <item name="_7X7_50">
            <description>7x7 bits, minimum hamming distance between any two codes = 19, 50 codes</description>
        </item>
        <item name="_7X7_100">
            <description>7x7 bits, minimum hamming distance between any two codes = 18, 100 codes</description>
        </item>
        <item name="_7X7_250">
            <description>7x7 bits, minimum hamming distance between any two codes = 17, 250 codes</description>
        </item>
        <item name="_7X7_1000">
            <description>7x7 bits, minimum hamming distance between any two codes = 14, 1000 codes</description>
        </item>
        <item name="_ARUCO_ORIGINAL">
            <description>6x6 bits, minimum hamming distance between any two codes = 3, 1024 codes</description>
        </item>
        <item name="_APRILTAG_16h5">
            <description>4x4 bits, minimum hamming distance between any two codes = 5, 30 codes</description>
        </item>
        <item name="_APRILTAG_25h9">
            <description>5x5 bits, minimum hamming distance between any two codes = 9, 35 codes</description>
        </item>
        <item name="_APRILTAG_36h10">
            <description>6x6 bits, minimum hamming distance between any two codes = 10, 2320 codes</description>
        </item>
        <item name="_APRILTAG_36h11">
            <description>6x6 bits, minimum hamming distance between any two codes = 11, 587 codes</description>
        </item>
    </enum>
    <command name="getMarkerDictionary">
        <description>Get the specified marker dictionary.</description>
        <params>
            <param name="type" type="int">
                <description>dictionary type (see <enum-ref name="dict_type" />)</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to the dictionary</description>
            </param>
        </return>
    </command>
    <command name="drawMarker">
        <description>Get the specified marker dictionary.</description>
        <params>
            <param name="dictionaryHandle" type="string">
                <description>dictionary handle created with <command-ref name="getMarkerDictionary" /></description>
            </param>
            <param name="markerId" type="int">
                <description>marker identifier</description>
            </param>
            <param name="size" type="int">
                <description>size in pixels</description>
            </param>
            <param name="handle" type="string" default='""'>
                <description>handle to existing image, or "" to create and return a new image</description>
            </param>
            <param name="borderSize" type="int" default="1">
                <description>border size</description>
            </param>
        </params>
        <return>
            <param name="handle" type="string">
                <description>handle to new image (or existing image if given)</description>
            </param>
        </return>
    </command>
    <command name="detectMarkers">
        <description>Detect markers in the specified image.</description>
        <params>
            <param name="handle" type="string">
                <description>handle to existing image</description>
            </param>
            <param name="dictionaryHandle" type="string">
                <description>dictionary handle created with <command-ref name="getMarkerDictionary" /></description>
            </param>
        </params>
        <return>
            <param name="corners" type="table" item-type="float">
                <description>corners of detected markers (4 xy pairs clockwise starting top-left)</description>
            </param>
            <param name="markerIds" type="table" item-type="int">
                <description>ids of detected markers</description>
            </param>
            <param name="rejectedCandidates" type="table" item-type="float">
                <description>corners of rejected candidates (4 xy pairs clockwise starting top-left)</description>
            </param>
        </return>
    </command>
</plugin>
